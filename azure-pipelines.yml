# pre-job: get latest sdist/version(s), check bucket for missing artifacts
# if missing, fan out to one worker per target OS
# build as necessary
# store artifacts on job
# final dependent job uploads artifacts to bucket

pool:
  vmImage: 'ubuntu-20.04'

stages:
- stage: pre_flight
  jobs:
  - job: find_missing_artifacts
    displayName: Find Missing Artifacts
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
    - script: |
        python -m pip install -r requirements.txt
        python gen_build_matrix.py
      env:
        # map AWS secrets in for this step
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      name: gen_matrix
    - script: echo $(gen_matrix.matrix)
      name: display_dynamic_matrix
- stage: wheel_builds
  dependsOn: pre_flight
  condition: dependencies.pre_flight.outputs['find_missing_artifacts.gen_matrix.matrix_has_jobs']
  jobs:
  - job: build
    strategy:
      matrix: $[ stageDependencies.pre_flight.find_missing_artifacts.outputs['gen_matrix.matrix'] ]
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
    - script: |
        set -eux
        echo "##[group]install ansible-core"
        pip install ansible-core
        echo "##[endgroup]"
        
        # HACK: this sucks
        echo "write jobdata for wheel builder task: $JOB_DATA"
        echo $JOB_DATA > collections/ansible_collections/ansible/spare_tire/tests/integration/targets/wheel_builder/files/jobdata.json
        echo "wheel_output_dir: $(pwd)/dist/" > collections/ansible_collections/ansible/spare_tire/tests/integration/targets/wheel_builder/vars/main.yml
        echo "##[group]run ansible-test against $(instance)"
        pushd collections/ansible_collections/ansible/spare_tire/
        # FIXME don't hardcode remote Python version 
        # FIXME add --remote-terminate always
        ansible-test integration --target remote:$(instance),python=3.8 -vv wheel_builder
        popd
        echo "##[endgroup]"

        cp dist/*.whl '$(Build.ArtifactStagingDirectory)'
      name: build_wheels
    - publish: '$(Build.ArtifactStagingDirectory)/*.whl'
      artifact: wheel
      name: store_wheels_as_pipeline_artifacts

- stage: publish
  dependsOn: wheel_builds
  jobs:
  - job: upload_to_s3
    steps:
    - script: |
        echo "fetch all pipelines artifacts, upload to S3"
        echo "regen index"
      name: sync_to_bucket
